package sudoku;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
/**
 * sudokuTester is the main class for our test cases.
 *
 * Here we test all the methods that have been implemented in the Sudoku class
 * {@link https://fileadmin.cs.lth.se/cs/Education/EDAA30/2023/F10kod/SudokuSolver.java} 
 *
 * @author Hannibal Lind and Tri Pham
 */
public class sudokuTester {
	private Sudoku s;
	private int[][] board;

	/**
	 * This is a method that is used before every test case making sure that we have a new
	 * sudoku object to work with.
	 */
	@BeforeEach
	void setUp() throws Exception {
		s = new Sudoku();
	}

	/**
	 * This is a method that is used after every test case making sure that the sudoku board is set to null.
	 */
	@AfterEach
	void tearDown() throws Exception {
		s = null;
	}

	/**
	 * This method is about testing the method of setBoard and getBoard from the interface SudokuSolver
	 * The trial method is done by first setting the board in our Sudoku object and then getting it back
	 * We check that it the inputed board is the same as the one we get by looping over every place in the matrix
	 */
	@Test
	void testSetGetBoard() {
		int[][] matris ={
			{0, 2, 0, 0, 0, 0, 0, 3, 1},
			{7, 0, 0, 0, 0, 3, 0, 0, 0},
			{0, 0, 0, 1, 4, 0, 2, 9, 0},
			{0, 5, 2, 7, 6, 4, 0, 1, 8},
			{0, 6, 3, 0, 1, 2, 7, 5, 9},
			{0, 7, 8, 0, 0, 0, 4, 0, 0},
			{2, 0, 0, 3, 7, 0, 0, 0, 5},
			{0, 1, 0, 0, 0, 0, 9, 0, 0},
			{5, 4, 0, 0, 8, 1, 0, 0, 0}
		};
		s.setBoard(matris);
		int[][] board = s.getBoard();
		for (int i = 0; i < board.length; i++){
			for (int j = 0; j< board[i].length; j++){
				assertEquals(matris[i][j], board[i][j]);
			}
		}
		//assertEquals(matris, s.getBoard());
	}

	/**
	 * This method is about testing the method of Solve from the interface SudokuSolver
	 * Here we send in a matrix to be solved and then use the get method to retrive the solved sudoku board.
	 * We check that it the inputed board has been solved by looping over every place in the board with a correct matrix of the solution.
	 */
	@Test
	void testSolve() {
		int[][] matris ={
			{0, 0, 8, 0, 0, 9, 0, 6, 2},
			{0, 0, 0, 0, 0, 0, 0, 0, 5},
			{1, 0, 2, 5, 0, 0, 0, 0, 0},
			{0, 0, 0, 2, 1, 0, 0, 9, 0},
			{0, 5, 0, 0, 0, 0, 6, 0, 0},
			{6, 0, 0, 0, 0, 0, 0, 2, 8},
			{4, 1, 0, 6, 0, 8, 0, 0, 0},
			{8, 6, 0, 0, 3, 0, 1, 0, 0},
			{0, 0, 0, 0, 0, 0, 4, 0, 0}
		};
		int[][] solulu ={
				{5, 4, 8, 1, 7, 9, 3, 6, 2},
				{3, 7, 6, 8, 2, 4, 9, 1, 5},
				{1, 9, 2, 5, 6, 3, 8, 7, 4},
				{7, 8, 4, 2, 1, 6, 5, 9, 3},
				{2, 5, 9, 3, 8, 7, 6, 4, 1},
				{6, 3, 1, 9, 4, 5, 7, 2, 8},
				{4, 1, 5, 6, 9, 8, 2, 3, 7},
				{8, 6, 7, 4, 3, 2, 1, 5, 9},
				{9, 2, 3, 7, 5, 1, 4, 8, 6}
			};
		s.setBoard(matris);
		s.solve();
		int[][] board = s.getBoard();
		for (int i = 0; i < board.length; i++){
			for (int j = 0; j< board[i].length; j++){
				assertEquals(solulu[i][j], board[i][j]);
			}
		}
		//assertEquals(matris, s.getBoard());
	}

	/**
	 * This method is about testing the method of Set, Get and clear from the interface SudokuSolver
	 * The trial method is done by first setting a number into a position on the sudoku board
	 * Then we assert that it was placed correctly by using the get method.
	 * Then we use the clear method to clear the board and check if the board got cleared.
	 */
	@Test 
	void testGetSetClear(){
		s.set(0,0,5);
		assertEquals(5, s.get(0,0));
		s.clear();
		assertEquals(0, s.get(0,0));
	}
}
