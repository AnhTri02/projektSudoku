package sudoku;

/**
 * Sudoku is our implementation of the interface SodokuSolver
 *
 * Here we test all the methods that have been implemented in the Sudoku class
 * {@link https://fileadmin.cs.lth.se/cs/Education/EDAA30/2023/F10kod/SudokuSolver.java} 
 *
 * @author Hannibal Lind and Tri Pham
 */

public class Sudoku implements SudokuSolver{
	private int[][] sudoku;
	private static final int start = 0;

	/**
	 * Constructor of our Sudoku, creates a 9x9 int matrix.
	 */
	public Sudoku() {
		sudoku = new int[9][9];
	}
	
	@Override
	public void setBoard(int[][] board) {
		sudoku = board;
	}
	
	@Override
	public int[][] getBoard(){
		return sudoku;
	}

	/**
	 * Method that checks if the current board would be legal or not
	 * @return Returns true if the board is solvable, else return false.
	 */
	public boolean solve() {
		
		if(checkLegalBoard()) {
				return recSolve();
		}
		return false;
	}

	@Override
	public int get(int row, int col){
		return sudoku[row][col];
	}

	@Override
	public void set(int row, int col, int nbr){
		sudoku[row][col] = nbr;
	}

	@Override
	public void clear(){
		for (int i = 0; i < sudoku.length; i++){
			for (int j = 0; j < sudoku[i].length; j++){
				sudoku[i][j] = 0;
			}
		}
	}

	/**
	 * Method that checks if the board inputed is capable of being recursivly solved with backtracking
	 * @return returns true if the board is a legal board that is inputed
	 */
	private boolean checkLegalBoard() {
			for(int row = 0; row < 9; row++) {
				for(int col = 0; col < 9; col++) {
					
					int temp = sudoku[row][col];
					sudoku[row][col] = 0;
					if(!isLegal(row,col, temp)) {
							return false;
					}
					sudoku[row][col] = temp;
				}
			}
			return true;
	}
	
	/**
	 * The Recursive solving method with backtracking
	 * @return true if the a grid place in the matrix can be a solution or the whole board is solved, returns false if the sudoku is unsolvable
	 */
	private boolean recSolve() {
		{
		    for(int row=0;row<9;row++) {
		        for(int col=0;col<9;col++) {
		            if(sudoku[row][col]==start){
		                for(int number=1; number<= 9; number++) {
		                    if(isLegal(row, col, number)) {
		                        sudoku[row][col] = number;
		                        
		                        if(recSolve()) {
		                            return true;
		                        }
		                        else {
		                            sudoku[row][col] = start;
		                        }
		                    }
		                }
		                return false;
		            }
		        }
		    }
		}
		    return true;
		
		}
	
	
	@Override
	public boolean isLegal(int row, int col, int nbr) {
		// om det FINNS ett nummer i raden, kolumnen och boxen, returnera false
		if ((checkRow(row, nbr) || checkCol(col, nbr) || checkBox(row, col, nbr))) {
			return false;
		} else {
			
			return true;
		}
	}
	
	/**
	 * Method to check if a number is a possible input in a row
	 * @param row
	 * @param number
	 * @return returns true if the number is already in the row else false
	 */
	private boolean checkRow(int row, int number) {
		if(number == 0) {
			return false;
		}
		for (int i = 0; i < 9; i++) {

			// om numret redan finns i raden, returnera true, annars false
			 if (sudoku[row][i] == number) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Method to check if a number is a possible input in a column
	 * @param col
	 * @param number
	 * @return returns true if the number is already in the column else false
	 */
	// hjälpmetod för att checka kolumnnummer
	private boolean checkCol(int col, int number) {
		if(number == 0) {
			return false;
		}
		for (int i = 0; i < 9; i++) {

			 if (sudoku[i][col] == number) {
				return true;
			}
		}
		return false;
	}


	/**
	 * Method to check if a number is possible input into the box 
	 * @param row
	 * @param col
	 * @param number
	 * @return returns true if the number is already in the box else false
	 */
	// checka om numret ligger i 3x3 rutan
	private boolean checkBox(int row, int col, int number) {
		if(number == 0) {
			return false;
		}
		// beräkna startpositionen för 3x3 box
		int r = row - row % 3;
		int c = col - col % 3;
		// itererar genom varje cell i boxen
		for (int i = r; i < r + 3; i++) {
			for (int j = c; j < c + 3; j++) {

				if (sudoku[i][j] == number) {
					return true;
				}
			}
		}
		return false;
	}
}
