package sudoku;

public class Sudoku implements SudokuSolver {
	private int[][] sudoku;
	private static final int start = 0;
	
	public Sudoku() {
		sudoku = new int[9][9];
	}
	
	@Override
	public void setBoard(int[][] board) {
		sudoku = board;
	}
	
	@Override
	public int[][] getBoard(){
		return sudoku;
	}
	
	public boolean solve() {
		
		return false;
	}
	
	public boolean legal(int row, int col, int nbr) {
		// om det FINNS ett nummer i raden, kolumnen och boxen, returnera false
		if ((checkRow(row, nbr) || checkCol(col, nbr) || checkBox(row, col, nbr))) {
			return false;
		} else {
			return true;
		}
	}
	
	//hjälpmetod för att checka radnummer 
	private boolean checkRow(int row, int number) {
		for (int i = 0; i < 9; i++) {
			// om numret redan finns i raden, returnera true, annars false
			if (sudoku[row][i] == number) {
				return true;
			}
		}
		return false;
	}

	// hjälpmetod för att checka kolumnnummer
	private boolean checkCol(int col, int number) {
		for (int i = 0; i < 9; i++) {
			// om siffran redan finns, returnera true
			if (sudoku[i][col] == number) {
				return true;
			}
		}
		return false;
	}

	// checka om numret ligger i 3x3 rutan
	private boolean checkBox(int row, int col, int number) {
		// beräkna startpositionen för 3x3 box
		int r = row - row % 3;
		int c = col - col % 3;
		// itererar genom varje cell i boxen
		for (int i = r; i < r + 3; i++) {
			for (int j = c; j < c + 3; j++) {

				if (sudoku[i][j] == number) {
					return true;
				}
			}
		}
		return false;
	}
}
