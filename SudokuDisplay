package sudoku;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


/**
 * sudokuDisplay is the main program for the gui
 *
 * @author Hannibal Lind and Tri Pham
 */
public class SudokuDisplay {

	/**
	 * Main method of our program that creates a SwingUtilites object of our method that creates a gui for the sudoku
	 * @param args, a string vector
	 */
	public static void main(String[] args) {
        // Skapa en instans av SudokuDisplay när programmet körs
		SwingUtilities.invokeLater(() -> new SudokuDisplay());
	}

	private Sudoku solver;
	private JTextField[][] tFs;

	/**
	 * Method for creating a gui for the sudoku and also showcasing the solution to the user
	 * It does so by creating a JFrame where we put buttons for solve and clearing the grid of JTextfields that is used to input the numbers and display the solution
	 */
	public SudokuDisplay() {
	
		this.solver = new Sudoku();
	
		JFrame frame = new JFrame("Sudokulösare");
		JPanel sudokuPanel = new JPanel(new GridLayout(9, 9));
		JButton solveButton= new JButton("Solve");
		JButton clearButton= new JButton("Clear");
		
	
		JPanel buttons = new JPanel(new FlowLayout());
		
		buttons.add(solveButton);
		buttons.add(clearButton);
		
		frame.add(sudokuPanel, BorderLayout.CENTER);
		frame.add(buttons, BorderLayout.SOUTH);
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		tFs = new JTextField[9][9];
		
		for (int i = 0; i < 9; i++) {
		    for (int j = 0; j < 9; j++) {
		        JTextField textField = new JTextField();
		        
		        int subSquare = (i / 3 + j / 3) % 2;
		        if (subSquare == 0) {
		            textField.setBackground(Color.GRAY);
		        } else {
		            textField.setBackground(Color.WHITE);
		        }
		        textField.setOpaque(true);
		        tFs[i][j] = textField;
		        sudokuPanel.add(textField);
		    }
		}
		int[][] toSolve = new int[9][9];
		
		clearButton.addActionListener(new ActionListener(){
			/**
			 * Method for what the clear button will do
			 * @param e ActionEvent from the clear button.
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				for (int i = 0; i < 9; i++) {
				    for (int j = 0; j < 9; j++) {
				        tFs[i][j].setText("");
				    }
				}
				solver.clear();
			}
		});
		
		solveButton.addActionListener(new ActionListener(){
			/**
			 * Method for getting the values inputed in the Jtextfields and sending it them to the solver
			 * after that call for our solve method.
			 * @param e an ActionEvent that comes from a button click on the solve button.
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				for (int i = 0; i <9 ; i++) {
					for (int j = 0; j < 9; j++) {
						try {
							if(tFs[i][j].getText().equals("")) {
								toSolve[i][j] = 0;
							}
							else {
								int temp = Integer.parseInt(tFs[i][j].getText());
								if (temp < 1 || temp > 9) {
									throw new NumberFormatException();
								}
								else {
									toSolve[i][j] = temp;
								}
								
							}
						}
						catch(NumberFormatException f){
							System.out.println("YOU BAKA YOU DIDN'T input a valid number between 1-9");
									return;
						}
					}
				}
				solve(toSolve);
			}
		});
		

		frame.pack();
		frame.setVisible(true);
	}
	
	/**
	 * Method for getting a matrix that we will be checked if it is solvable. 
	 * If solvable output it in the grid of Jtextfields on the gui else tell the user that the sudoku they inputed isn't solvable.
	 * @param toSolve a int matrix that will be tried to be solved.
	 * @return 
	 */
	private void solve(int[][] toSolve){
		int[][] solved = new int[9][9];
		solver.setBoard(toSolve);
		if(solver.solve()) {
			System.out.println("Sudoku is solvalable here is solulu");
			solved = solver.getBoard();
			
			for (int i = 0; i < 9; i++) {
			    for (int j = 0; j < 9; j++) {
			        tFs[i][j].setText(String.valueOf(solved[i][j]));
			    }
			}
		}
		else {
			System.out.println("Stupid baka you made unsolvable sudoku, try again");
		}
	}
}
